#ifndef TESTSIM_H
#define TESTSIM_H

#include <iostream>
#include <string>
#include <sstream>

#include "../simulator.h"

using namespace std;

class TestSim
{
public:

    //****************
    // PUBLIC METHODS
    //****************

    /********************************************************************
    Default constructor
    ********************************************************************/
    TestSim();

    /********************************************************************
    Runs all defined testing functions and prints the errors generated by
    those functions.

    @return
        The printed output of the functions
    ********************************************************************/
    string allTests( );

    /********************************************************************
    Prints the population of the simulator by printing each member of the
    population's type and location

    @testSim
        Pointer to the simulator to print
    @behavior
        Indicates whether or not to print the behavior timers of the cell
    @return
        The printed population
    ********************************************************************/
    string printSim(Simulator* testSim, bool behavior = false);

    /********************************************************************
    Automated testing for the Simulator Constructor. Prints failed test
    cases.

    @return
        The printed output of the function
    ********************************************************************/
    string testConstructor( );

    /********************************************************************
    Automated testing for Simulator::step( ). Prints failed test cases.

    @return
        The printed output of the function
    ********************************************************************/
    string testStep( );

    /********************************************************************
    Automated testing for Simulator::populate( ). Prints failed test
    cases.

    @return
        The printed output of the function
    ********************************************************************/
    string testPopulate( );

    /********************************************************************
    Automated testing for Simulator::populate_type( ). Prints failed test
    cases.

    @return
        The printed output of the function
    ********************************************************************/
    string testPopulate_Type( );

    /********************************************************************
    Automated testing for Simulator::move( ). Prints failed test cases.

    @return
        The printed output of the function
    ********************************************************************/
    string testMove( );

    /********************************************************************
    Automated testing for Simulator::find_forward( ). Prints failed test
    cases.

    @return
        The printed output of the function
    ********************************************************************/
    string testFind_Forward( );

    /********************************************************************
    Automated testing for Simulator::space_availiable( ). Prints failed
    test cases.

    @return
        The printed output of the function
    ********************************************************************/
    string testSpace_Availiable( );


    // STEP() SUBFUNCTIONS

    /********************************************************************
    Subfunction of TestSim::testStep(). Handles PopulationSize
    maintenence testing.

    @return
        The printed output of the function
    ********************************************************************/
    string subStep_PopulationSize( );

    /********************************************************************
    Subfunction of TestSim::testStep(). Handles testing of the lumen area
    functionality.

    @return
        The printed output of the function
    ********************************************************************/
    string subStep_LumenArea( );

    /********************************************************************
    Subfunction of TestSim::testStep(). Handles movement action testing.

    @return
        The printed output of the function
    ********************************************************************/
    string subStep_Movement( );

    /********************************************************************
    Subfunction of TestSim::testStep(). Handles testing of proliferation
    actions.

    @return
        The printed output of the function
    ********************************************************************/
    string subStep_Proliferation( );

    /********************************************************************
    Subfunction of TestSim::testStep(). Handles testing of removal
    actions.

    @return
        The printed output of the function
    ********************************************************************/
    string subStep_Removal( );

    /********************************************************************
    Subfunction of TestSim::testStep(). Handles testing of simultaneous
    execution of cell behavior actions (i.e. proliferation, movement...)

    @return
        The printed output of the function
    ********************************************************************/
    string subStep_Simultaneous( );

    /********************************************************************
    Subfunction of TestSim::testStep(). Handles testing of stepping
    through an empty population

    @return
        The printed output of the function
    ********************************************************************/
    string subStep_Empty( );

    /********************************************************************
    Subfunction of TestSim::testStep(). Handles testing of a population
    which intially starts with a non-zero size and becomes empty

    @return
        The printed output of the function
    ********************************************************************/
    string subStep_Emptied( );

    /********************************************************************
    Subfunction of TestSim::testStep(). Handles testing of a growing
    population

    @return
        The printed output of the function
    ********************************************************************/
    string subStep_Growing( );

    /********************************************************************
    Subfunction of TestSim::testStep(). Handles testing of a stable
    population

    @return
        The printed output of the function
    ********************************************************************/
    string subStep_Stable( );

};

#endif // TESTSIM_H
